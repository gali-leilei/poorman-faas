// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Code Error code
	Code string `json:"code"`

	// Error Error message
	Error string `json:"error"`
}

// ListMCPServiceParams defines parameters for ListMCPService.
type ListMCPServiceParams struct {
	// User User identifier
	User string `form:"user" json:"user"`
}

// CreateMCPServiceMultipartBody defines parameters for CreateMCPService.
type CreateMCPServiceMultipartBody struct {
	// File a PEP 723 compliant Python script, which will be used to create the MCP service
	File openapi_types.File `json:"file"`

	// User User identifier
	User string `json:"user"`
}

// ProxyPostMCPJSONBody defines parameters for ProxyPostMCP.
type ProxyPostMCPJSONBody = map[string]interface{}

// ProxyPostMCPMultipartBody defines parameters for ProxyPostMCP.
type ProxyPostMCPMultipartBody = map[string]interface{}

// ProxyPostMCPTextBody defines parameters for ProxyPostMCP.
type ProxyPostMCPTextBody = string

// CreateMCPServiceMultipartRequestBody defines body for CreateMCPService for multipart/form-data ContentType.
type CreateMCPServiceMultipartRequestBody CreateMCPServiceMultipartBody

// ProxyPostMCPJSONRequestBody defines body for ProxyPostMCP for application/json ContentType.
type ProxyPostMCPJSONRequestBody = ProxyPostMCPJSONBody

// ProxyPostMCPMultipartRequestBody defines body for ProxyPostMCP for multipart/form-data ContentType.
type ProxyPostMCPMultipartRequestBody = ProxyPostMCPMultipartBody

// ProxyPostMCPTextRequestBody defines body for ProxyPostMCP for text/plain ContentType.
type ProxyPostMCPTextRequestBody = ProxyPostMCPTextBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListMCPService request
	ListMCPService(ctx context.Context, params *ListMCPServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMCPServiceWithBody request with any body
	CreateMCPServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProxyGetMCP request
	ProxyGetMCP(ctx context.Context, serviceUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProxyPostMCPWithBody request with any body
	ProxyPostMCPWithBody(ctx context.Context, serviceUUID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProxyPostMCP(ctx context.Context, serviceUUID openapi_types.UUID, body ProxyPostMCPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProxyPostMCPWithTextBody(ctx context.Context, serviceUUID openapi_types.UUID, body ProxyPostMCPTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListMCPService(ctx context.Context, params *ListMCPServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMCPServiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMCPServiceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMCPServiceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProxyGetMCP(ctx context.Context, serviceUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProxyGetMCPRequest(c.Server, serviceUUID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProxyPostMCPWithBody(ctx context.Context, serviceUUID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProxyPostMCPRequestWithBody(c.Server, serviceUUID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProxyPostMCP(ctx context.Context, serviceUUID openapi_types.UUID, body ProxyPostMCPJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProxyPostMCPRequest(c.Server, serviceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProxyPostMCPWithTextBody(ctx context.Context, serviceUUID openapi_types.UUID, body ProxyPostMCPTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProxyPostMCPRequestWithTextBody(c.Server, serviceUUID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListMCPServiceRequest generates requests for ListMCPService
func NewListMCPServiceRequest(server string, params *ListMCPServiceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mcp-service")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMCPServiceRequestWithBody generates requests for CreateMCPService with any type of body
func NewCreateMCPServiceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mcp-service")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProxyGetMCPRequest generates requests for ProxyGetMCP
func NewProxyGetMCPRequest(server string, serviceUUID openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service-uuid", runtime.ParamLocationPath, serviceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/mcp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProxyPostMCPRequest calls the generic ProxyPostMCP builder with application/json body
func NewProxyPostMCPRequest(server string, serviceUUID openapi_types.UUID, body ProxyPostMCPJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProxyPostMCPRequestWithBody(server, serviceUUID, "application/json", bodyReader)
}

// NewProxyPostMCPRequestWithTextBody calls the generic ProxyPostMCP builder with text/plain body
func NewProxyPostMCPRequestWithTextBody(server string, serviceUUID openapi_types.UUID, body ProxyPostMCPTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewProxyPostMCPRequestWithBody(server, serviceUUID, "text/plain", bodyReader)
}

// NewProxyPostMCPRequestWithBody generates requests for ProxyPostMCP with any type of body
func NewProxyPostMCPRequestWithBody(server string, serviceUUID openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "service-uuid", runtime.ParamLocationPath, serviceUUID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/mcp", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListMCPServiceWithResponse request
	ListMCPServiceWithResponse(ctx context.Context, params *ListMCPServiceParams, reqEditors ...RequestEditorFn) (*ListMCPServiceResponse, error)

	// CreateMCPServiceWithBodyWithResponse request with any body
	CreateMCPServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMCPServiceResponse, error)

	// ProxyGetMCPWithResponse request
	ProxyGetMCPWithResponse(ctx context.Context, serviceUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*ProxyGetMCPResponse, error)

	// ProxyPostMCPWithBodyWithResponse request with any body
	ProxyPostMCPWithBodyWithResponse(ctx context.Context, serviceUUID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProxyPostMCPResponse, error)

	ProxyPostMCPWithResponse(ctx context.Context, serviceUUID openapi_types.UUID, body ProxyPostMCPJSONRequestBody, reqEditors ...RequestEditorFn) (*ProxyPostMCPResponse, error)

	ProxyPostMCPWithTextBodyWithResponse(ctx context.Context, serviceUUID openapi_types.UUID, body ProxyPostMCPTextRequestBody, reqEditors ...RequestEditorFn) (*ProxyPostMCPResponse, error)
}

type ListMCPServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Services []struct {
			// CreatedAt Creation timestamp for the MCP service
			CreatedAt time.Time `json:"created_at"`

			// ID MCP service identifier
			ID string `json:"id"`

			// URL MCP service URL
			URL string `json:"url"`
		} `json:"services"`
	}
	JSON400 *struct {
		// Code Error code
		Code string `json:"code"`

		// Error Error message
		Error string `json:"error"`
	}
	JSON404 *struct {
		// Code Error code
		Code string `json:"code"`

		// Error Error message
		Error string `json:"error"`
	}
	JSON500 *struct {
		// Code Error code
		Code string `json:"code"`

		// Error Error message
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r ListMCPServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMCPServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMCPServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// URL The generated URL for the MCP service
		URL string `json:"url"`
	}
	JSON400 *struct {
		// Code Error code
		Code string `json:"code"`

		// Error Error message
		Error string `json:"error"`
	}
	JSON500 *struct {
		// Code Error code
		Code string `json:"code"`

		// Error Error message
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateMCPServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMCPServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProxyGetMCPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON201      *map[string]interface{}
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON405      *ErrorResponse
	JSON500      *ErrorResponse
	JSON502      *ErrorResponse
	JSON503      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProxyGetMCPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProxyGetMCPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProxyPostMCPResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON201      *map[string]interface{}
	JSON400      *ErrorResponse
	JSON404      *ErrorResponse
	JSON405      *ErrorResponse
	JSON500      *ErrorResponse
	JSON502      *ErrorResponse
	JSON503      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ProxyPostMCPResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProxyPostMCPResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListMCPServiceWithResponse request returning *ListMCPServiceResponse
func (c *ClientWithResponses) ListMCPServiceWithResponse(ctx context.Context, params *ListMCPServiceParams, reqEditors ...RequestEditorFn) (*ListMCPServiceResponse, error) {
	rsp, err := c.ListMCPService(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMCPServiceResponse(rsp)
}

// CreateMCPServiceWithBodyWithResponse request with arbitrary body returning *CreateMCPServiceResponse
func (c *ClientWithResponses) CreateMCPServiceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMCPServiceResponse, error) {
	rsp, err := c.CreateMCPServiceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMCPServiceResponse(rsp)
}

// ProxyGetMCPWithResponse request returning *ProxyGetMCPResponse
func (c *ClientWithResponses) ProxyGetMCPWithResponse(ctx context.Context, serviceUUID openapi_types.UUID, reqEditors ...RequestEditorFn) (*ProxyGetMCPResponse, error) {
	rsp, err := c.ProxyGetMCP(ctx, serviceUUID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProxyGetMCPResponse(rsp)
}

// ProxyPostMCPWithBodyWithResponse request with arbitrary body returning *ProxyPostMCPResponse
func (c *ClientWithResponses) ProxyPostMCPWithBodyWithResponse(ctx context.Context, serviceUUID openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProxyPostMCPResponse, error) {
	rsp, err := c.ProxyPostMCPWithBody(ctx, serviceUUID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProxyPostMCPResponse(rsp)
}

func (c *ClientWithResponses) ProxyPostMCPWithResponse(ctx context.Context, serviceUUID openapi_types.UUID, body ProxyPostMCPJSONRequestBody, reqEditors ...RequestEditorFn) (*ProxyPostMCPResponse, error) {
	rsp, err := c.ProxyPostMCP(ctx, serviceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProxyPostMCPResponse(rsp)
}

func (c *ClientWithResponses) ProxyPostMCPWithTextBodyWithResponse(ctx context.Context, serviceUUID openapi_types.UUID, body ProxyPostMCPTextRequestBody, reqEditors ...RequestEditorFn) (*ProxyPostMCPResponse, error) {
	rsp, err := c.ProxyPostMCPWithTextBody(ctx, serviceUUID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProxyPostMCPResponse(rsp)
}

// ParseListMCPServiceResponse parses an HTTP response from a ListMCPServiceWithResponse call
func ParseListMCPServiceResponse(rsp *http.Response) (*ListMCPServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMCPServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Services []struct {
				// CreatedAt Creation timestamp for the MCP service
				CreatedAt time.Time `json:"created_at"`

				// ID MCP service identifier
				ID string `json:"id"`

				// URL MCP service URL
				URL string `json:"url"`
			} `json:"services"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Code Error code
			Code string `json:"code"`

			// Error Error message
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			// Code Error code
			Code string `json:"code"`

			// Error Error message
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Error code
			Code string `json:"code"`

			// Error Error message
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateMCPServiceResponse parses an HTTP response from a CreateMCPServiceWithResponse call
func ParseCreateMCPServiceResponse(rsp *http.Response) (*CreateMCPServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMCPServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// URL The generated URL for the MCP service
			URL string `json:"url"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			// Code Error code
			Code string `json:"code"`

			// Error Error message
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			// Code Error code
			Code string `json:"code"`

			// Error Error message
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseProxyGetMCPResponse parses an HTTP response from a ProxyGetMCPWithResponse call
func ParseProxyGetMCPResponse(rsp *http.Response) (*ProxyGetMCPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProxyGetMCPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/event-stream) unsupported

	case rsp.StatusCode == 201:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseProxyPostMCPResponse parses an HTTP response from a ProxyPostMCPWithResponse call
func ParseProxyPostMCPResponse(rsp *http.Response) (*ProxyPostMCPResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProxyPostMCPResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/event-stream) unsupported

	case rsp.StatusCode == 201:
		// Content-type (*/*) unsupported

	}

	return response, nil
}
